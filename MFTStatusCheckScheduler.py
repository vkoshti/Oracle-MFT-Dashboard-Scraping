from MFTStatusChecker import MFTStatusChecker
import schedule
import time
from datetime import datetime, timedelta
import smtplib
from email.message import EmailMessage
from email.headerregistry import Address
from email.utils import make_msgid
import ssl

email_list = ['vishalkoshti165@gmail.com', 'emailaddress@gmail.com']
mft_prop = [{
		'host':'140.XXX.XX.XXX',
		'username':'weblogic',
		'password':'Password',
		'isSecured':False,
		'mft_instance':'Dev'
}, {
		'host':'132.XXX.XX.XXX',
		'username':'weblogic',
		'password':'Password',
		'isSecured':False,
		'mft_instance':'PROD'
}]

def job():
	for mft in mft_prop:
		try:
			mft_checker=MFTStatusChecker()
			check_transfer_failures(mft_checker.get_last_trasnfer_info(mft), mft['mft_instance'])
		except Exception as err:
			print("Unexpected Error "+str(err))
			notify_exceptions(str(err), mft['mft_instance'])


def check_transfer_failures(last_run_time : str, mft_instance: str):
	datetime_object = datetime.strptime(last_run_time, '%b %d, %Y %I:%M:%S %p')
	now = datetime.now()
	interval = calculate_dynamic_interval()
	if now-timedelta(hours=interval) >= datetime_object:
		nofity_possible_failure(last_run_time, mft_instance)

def nofity_possible_failure(last_run_time : str, mft_instance : str):
	email_body = "Last transfer time : "+last_run_time
	subject = mft_instance + " -- MFT Transfer Status"
	send_email(subject , email_body , email_list)

def notify_exceptions(error : str, mft_instance : str):
	email_body = "Exception occured " + error
	subject = mft_instance + " -- MFT Transfer Status"
	send_email(subject ,email_body , email_list)

def calculate_dynamic_interval():
	if datetime.now().strftime('%A') in ['Sunday', 'Saturday']:
		return 12
	current_hour = datetime.now().hour
	if (current_hour >= 0 and current_hour <= 8):
		return 8
	else:
		return 3

def send_email(subject : str,body : str, email_list : list = []):
	HOST='email host'
	PORT=587
	msg = EmailMessage()
	msg['Subject'] = subject
	msg['To'] = email_list
	BODY_HTML = """<html>
					<head></head>
					<body>
					  <h1>MFT Transfer Status</h1>
					  <table border="1">
					  	<tr>
					  		<td style="padding : 10px">
						""" + body + """
					  		</td>
					  	</tr>
					  </table>
					  <br/>
					  <br/>
					  <br/>
					  <h6>This is an autogenerated email, Please do not reply</h6>
					</body>
					</html>"""
	msg.add_alternative(BODY_HTML,subtype='html')
	smtpsession = smtplib.SMTP(host=HOST, port=PORT)
	smtpsession.ehlo
	smtpsession.starttls(context=ssl.create_default_context(purpose=ssl.Purpose.SERVER_AUTH, cafile=None, capath=None))
	smtpsession.ehlo
	smtpsession.login("email user", "password")
	smtpsession.sendmail("email account", 
		email_list, msg.as_string())
	smtpsession.quit()


#schedule every three hours
schedule.every(3).hours.do(job)

while 1:
	schedule.run_pending()
	time.sleep(1000)